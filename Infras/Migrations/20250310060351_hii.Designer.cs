// <auto-generated />
using System;
using Infras;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infras.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20250310060351_hii")]
    partial class hii
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Candidate", b =>
                {
                    b.Property<long>("CandidateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CandidateID"));

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CandidateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CandidateID");

                    b.ToTable("CandidateTbl");
                });

            modelBuilder.Entity("Domain.CandidatePerformance", b =>
                {
                    b.Property<long>("CandidatePerformanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CandidatePerformanceID"));

                    b.Property<long>("CandidateID")
                        .HasColumnType("bigint");

                    b.Property<long>("MockTestID")
                        .HasColumnType("bigint");

                    b.HasKey("CandidatePerformanceID");

                    b.HasIndex("CandidateID");

                    b.HasIndex("MockTestID");

                    b.ToTable("CandidatePerformanceTbl");
                });

            modelBuilder.Entity("Domain.CandidatePerformanceDet", b =>
                {
                    b.Property<long>("CandidatePerformanceDetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CandidatePerformanceDetID"));

                    b.Property<long>("CandidatePerformanceID")
                        .HasColumnType("bigint");

                    b.Property<long>("MockTestID")
                        .HasColumnType("bigint");

                    b.Property<long>("ObtainedMarks")
                        .HasColumnType("bigint");

                    b.Property<long>("SolvedQuestion")
                        .HasColumnType("bigint");

                    b.HasKey("CandidatePerformanceDetID");

                    b.HasIndex("CandidatePerformanceID");

                    b.HasIndex("MockTestID");

                    b.ToTable("CandidatePerformanceDetTbl");
                });

            modelBuilder.Entity("Domain.Company", b =>
                {
                    b.Property<long>("CompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CompanyID"));

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPersonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CompanyID");

                    b.ToTable(" CompanyTbl");
                });

            modelBuilder.Entity("Domain.CompanyComplaint", b =>
                {
                    b.Property<long>("CompantComplaintID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CompantComplaintID"));

                    b.Property<long>("CompanyID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ComplaintDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ComplaintDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComplaintTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompantComplaintID");

                    b.HasIndex("CompanyID");

                    b.ToTable("CompanyComplaintTbl");
                });

            modelBuilder.Entity("Domain.CompanyComplaintSolution", b =>
                {
                    b.Property<long>("CompanyComplaintSolutionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CompanyComplaintSolutionID"));

                    b.Property<long>("CompantComplaintID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SolutionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SolutionDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SolutionTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyComplaintSolutionID");

                    b.HasIndex("CompantComplaintID");

                    b.ToTable("CompanyComplaintSolutionTbl");
                });

            modelBuilder.Entity("Domain.CompanyTrail", b =>
                {
                    b.Property<long>("CompanyTrailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CompanyTrailID"));

                    b.Property<long>("CompanyID")
                        .HasColumnType("bigint");

                    b.Property<bool>("TrailActiveFlag")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TrailEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TrailStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CompanyTrailID");

                    b.HasIndex("CompanyID");

                    b.ToTable("CompanyTrailTbl");
                });

            modelBuilder.Entity("Domain.MockTest", b =>
                {
                    b.Property<long>("MockTestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MockTestID"));

                    b.Property<bool>("IsNegavtive")
                        .HasColumnType("bit");

                    b.Property<long>("MarksPerQuestion")
                        .HasColumnType("bigint");

                    b.Property<string>("MockTestName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MockTestSubjectID")
                        .HasColumnType("bigint");

                    b.Property<long>("NoofQuestion")
                        .HasColumnType("bigint");

                    b.Property<long>("PassingMarks")
                        .HasColumnType("bigint");

                    b.HasKey("MockTestID");

                    b.HasIndex("MockTestSubjectID");

                    b.ToTable("MockTestTbl");
                });

            modelBuilder.Entity("Domain.MockTestCategory", b =>
                {
                    b.Property<long>("MockTestCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MockTestCategoryID"));

                    b.Property<string>("MockTestCategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MockTestCategoryID");

                    b.ToTable("MockTestCategoryTbl");
                });

            modelBuilder.Entity("Domain.MockTestQuestion", b =>
                {
                    b.Property<long>("MockTestQuestionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MockTestQuestionID"));

                    b.Property<bool>("IsObjective")
                        .HasColumnType("bit");

                    b.Property<long>("MockTestSubjectID")
                        .HasColumnType("bigint");

                    b.Property<string>("Questions")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MockTestQuestionID");

                    b.HasIndex("MockTestSubjectID");

                    b.ToTable("MockTestQuestionTbl");
                });

            modelBuilder.Entity("Domain.MockTestQuestionAnswer", b =>
                {
                    b.Property<long>("MockTestQuestionAnswerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MockTestQuestionAnswerID"));

                    b.Property<string>("CorrectOption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MockTestQuestionOptionsID")
                        .HasColumnType("bigint");

                    b.HasKey("MockTestQuestionAnswerID");

                    b.HasIndex("MockTestQuestionOptionsID");

                    b.ToTable("MockTestQuestionAnswerTbl");
                });

            modelBuilder.Entity("Domain.MockTestQuestionOptions", b =>
                {
                    b.Property<long>("MockTestQuestionOptionsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MockTestQuestionOptionsID"));

                    b.Property<long>("MockTestQuestionID")
                        .HasColumnType("bigint");

                    b.Property<string>("Option1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option4")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MockTestQuestionOptionsID");

                    b.HasIndex("MockTestQuestionID");

                    b.ToTable("MockTestQuestionOptionsTbl");
                });

            modelBuilder.Entity("Domain.MockTestSubject", b =>
                {
                    b.Property<long>("MockTestSubjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MockTestSubjectID"));

                    b.Property<long>("MockTestCategoryID")
                        .HasColumnType("bigint");

                    b.Property<string>("SubjectDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MockTestSubjectID");

                    b.HasIndex("MockTestCategoryID");

                    b.ToTable(" MockTestSubjectTbl");
                });

            modelBuilder.Entity("Domain.OfferDiscount", b =>
                {
                    b.Property<long>("OfferDiscountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("OfferDiscountID"));

                    b.Property<string>("ApplicableTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Ispercentile")
                        .HasColumnType("bit");

                    b.Property<string>("OfferTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ToFromDate")
                        .HasColumnType("datetime2");

                    b.HasKey("OfferDiscountID");

                    b.ToTable("OfferDiscountTbl");
                });

            modelBuilder.Entity("Domain.PackageCardPayment", b =>
                {
                    b.Property<long>("PackageCardPaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PackageCardPaymentID"));

                    b.Property<string>("AutCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PackagePurchasePaymentID")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PackageCardPaymentID");

                    b.HasIndex("PackagePurchasePaymentID");

                    b.ToTable("packageCardPayments");
                });

            modelBuilder.Entity("Domain.PackagePurchase", b =>
                {
                    b.Property<long>("PackagePurchaseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PackagePurchaseID"));

                    b.Property<long>("CompanyID")
                        .HasColumnType("bigint");

                    b.Property<long>("PackageDuration")
                        .HasColumnType("bigint");

                    b.Property<string>("PackagePurchaseTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("TestPackageID")
                        .HasColumnType("bigint");

                    b.HasKey("PackagePurchaseID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("TestPackageID");

                    b.ToTable(" PackagePurchaseTbl");
                });

            modelBuilder.Entity("Domain.PackagePurchasePayment", b =>
                {
                    b.Property<long>("PackagePurchasePaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PackagePurchasePaymentID"));

                    b.Property<long>("PackagePurchaseID")
                        .HasColumnType("bigint");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("PaymentModeID")
                        .HasColumnType("bigint");

                    b.HasKey("PackagePurchasePaymentID");

                    b.HasIndex("PackagePurchaseID");

                    b.HasIndex("PaymentModeID");

                    b.ToTable("PackagePurchasePaymentTbl");
                });

            modelBuilder.Entity("Domain.PackageUPIPayment", b =>
                {
                    b.Property<long>("PackageUPIPaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PackageUPIPaymentID"));

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PackagePurchasePaymentID")
                        .HasColumnType("bigint");

                    b.HasKey("PackageUPIPaymentID");

                    b.HasIndex("PackagePurchasePaymentID");

                    b.ToTable("PackageUPIPayments");
                });

            modelBuilder.Entity("Domain.PaymentMode", b =>
                {
                    b.Property<long>("PaymentModeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PaymentModeID"));

                    b.Property<string>("PaymentModeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentModeID");

                    b.ToTable("PaymentModeTbl");
                });

            modelBuilder.Entity("Domain.Question", b =>
                {
                    b.Property<long>("QuestionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("QuestionID"));

                    b.Property<bool>("IsObjective")
                        .HasColumnType("bit");

                    b.Property<long>("QuestionBankID")
                        .HasColumnType("bigint");

                    b.Property<string>("QuestionTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionID");

                    b.HasIndex("QuestionBankID");

                    b.ToTable("QuestionTbl");
                });

            modelBuilder.Entity("Domain.QuestionAnswer", b =>
                {
                    b.Property<long>("QuestionAnswerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("QuestionAnswerID"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<string>("Option")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("QuestionID")
                        .HasColumnType("bigint");

                    b.HasKey("QuestionAnswerID");

                    b.HasIndex("QuestionID");

                    b.ToTable("QuestionAnswerTbl");
                });

            modelBuilder.Entity("Domain.QuestionBank", b =>
                {
                    b.Property<long>("QuestionBankID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("QuestionBankID"));

                    b.Property<long>("CompanyID")
                        .HasColumnType("bigint");

                    b.Property<string>("QuestionBankTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("QuestionDBCategoryID")
                        .HasColumnType("bigint");

                    b.HasKey("QuestionBankID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("QuestionDBCategoryID");

                    b.ToTable("QuestionBankTbl");
                });

            modelBuilder.Entity("Domain.QuestionDBCategory", b =>
                {
                    b.Property<long>("QuestionDBCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("QuestionDBCategoryID"));

                    b.Property<long>("CompanyID")
                        .HasColumnType("bigint");

                    b.Property<string>("QuestionDBCategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionDBCategoryID");

                    b.HasIndex("CompanyID");

                    b.ToTable("QuestionDBCategoryTbl");
                });

            modelBuilder.Entity("Domain.ScheduleExam", b =>
                {
                    b.Property<long>("ScheduleExamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ScheduleExamID"));

                    b.Property<long>("CompanyID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsObjective")
                        .HasColumnType("bit");

                    b.Property<bool>("IsResultOpen")
                        .HasColumnType("bit");

                    b.Property<long>("PackagePurchaseID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ScheduleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ScheduleExamID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("PackagePurchaseID");

                    b.ToTable("ScheduleExamTbl");
                });

            modelBuilder.Entity("Domain.ScheduleExamCandidate", b =>
                {
                    b.Property<long>("ScheduleExamCandidateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ScheduleExamCandidateID"));

                    b.Property<long>("CandidateID")
                        .HasColumnType("bigint");

                    b.Property<long>("ScheduleExamID")
                        .HasColumnType("bigint");

                    b.HasKey("ScheduleExamCandidateID");

                    b.HasIndex("CandidateID");

                    b.HasIndex("ScheduleExamID");

                    b.ToTable("ScheduleExamCandidateTbl");
                });

            modelBuilder.Entity("Domain.ScheduleExamDet", b =>
                {
                    b.Property<long>("ScheduleExamDetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ScheduleExamDetID"));

                    b.Property<long>("MarksPerQuestion")
                        .HasColumnType("bigint");

                    b.Property<long>("PassingMarks")
                        .HasColumnType("bigint");

                    b.Property<long>("QuestionBankID")
                        .HasColumnType("bigint");

                    b.Property<long>("ScheduleExamID")
                        .HasColumnType("bigint");

                    b.HasKey("ScheduleExamDetID");

                    b.HasIndex("QuestionBankID");

                    b.HasIndex("ScheduleExamID");

                    b.ToTable("ScheduleExamDetTbl");
                });

            modelBuilder.Entity("Domain.ScheduleExamResult", b =>
                {
                    b.Property<long>("ScheduleExamResultID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ScheduleExamResultID"));

                    b.Property<bool>("GenerationFlag")
                        .HasColumnType("bit");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ResultDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ScheduleExamCandidateID")
                        .HasColumnType("bigint");

                    b.HasKey("ScheduleExamResultID");

                    b.HasIndex("ScheduleExamCandidateID");

                    b.ToTable("ScheduleExamResultTbl");
                });

            modelBuilder.Entity("Domain.SiteAdmin", b =>
                {
                    b.Property<long>("SiteAdminID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SiteAdminID"));

                    b.Property<string>("EmailID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobileno")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SiteAdminID");

                    b.ToTable("SiteAdminTbl");
                });

            modelBuilder.Entity("Domain.TestPackage", b =>
                {
                    b.Property<long>("TestPackageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TestPackageID"));

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("MaxCandidatePerExam")
                        .HasColumnType("bigint");

                    b.Property<string>("PackageDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackageTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("TestPackageID");

                    b.ToTable("TestPackageTbl");
                });

            modelBuilder.Entity("Domain.TestPackageDet", b =>
                {
                    b.Property<long>("TestPackageDetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TestPackageDetID"));

                    b.Property<long>("NoofTest")
                        .HasColumnType("bigint");

                    b.Property<long>("TestPackageID")
                        .HasColumnType("bigint");

                    b.Property<long>("ValidityInMonths")
                        .HasColumnType("bigint");

                    b.HasKey("TestPackageDetID");

                    b.HasIndex("TestPackageID");

                    b.ToTable("TestPackageDetTbl");
                });

            modelBuilder.Entity("Domain.CandidatePerformance", b =>
                {
                    b.HasOne("Domain.Candidate", "Candidate")
                        .WithMany("CandidatePerformances")
                        .HasForeignKey("CandidateID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.MockTest", "MockTest")
                        .WithMany("CandidatePerformances")
                        .HasForeignKey("MockTestID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("MockTest");
                });

            modelBuilder.Entity("Domain.CandidatePerformanceDet", b =>
                {
                    b.HasOne("Domain.CandidatePerformance", "CandidatePerformance")
                        .WithMany("CandidatePerformanceDets")
                        .HasForeignKey("CandidatePerformanceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.MockTest", "MockTest")
                        .WithMany("CandidatePerformanceDets")
                        .HasForeignKey("MockTestID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CandidatePerformance");

                    b.Navigation("MockTest");
                });

            modelBuilder.Entity("Domain.CompanyComplaint", b =>
                {
                    b.HasOne("Domain.Company", "Company")
                        .WithMany("CompanyComplaints")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.CompanyComplaintSolution", b =>
                {
                    b.HasOne("Domain.CompanyComplaint", "CompantComplaint")
                        .WithMany("CompanySolutions")
                        .HasForeignKey("CompantComplaintID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CompantComplaint");
                });

            modelBuilder.Entity("Domain.CompanyTrail", b =>
                {
                    b.HasOne("Domain.Company", "Company")
                        .WithMany("CompanyTrails")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.MockTest", b =>
                {
                    b.HasOne("Domain.MockTestSubject", "MockTestSubject")
                        .WithMany("MockTests")
                        .HasForeignKey("MockTestSubjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MockTestSubject");
                });

            modelBuilder.Entity("Domain.MockTestQuestion", b =>
                {
                    b.HasOne("Domain.MockTestSubject", "MockTestSubject")
                        .WithMany("MockTestQuestions")
                        .HasForeignKey("MockTestSubjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MockTestSubject");
                });

            modelBuilder.Entity("Domain.MockTestQuestionAnswer", b =>
                {
                    b.HasOne("Domain.MockTestQuestionOptions", "MockTestQuestionOptions")
                        .WithMany("MockTestQuestionAnswers")
                        .HasForeignKey("MockTestQuestionOptionsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MockTestQuestionOptions");
                });

            modelBuilder.Entity("Domain.MockTestQuestionOptions", b =>
                {
                    b.HasOne("Domain.MockTestQuestion", "MockTestQuestion")
                        .WithMany("MockTestQuestionOptions")
                        .HasForeignKey("MockTestQuestionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MockTestQuestion");
                });

            modelBuilder.Entity("Domain.MockTestSubject", b =>
                {
                    b.HasOne("Domain.MockTestCategory", "MockTestCategory")
                        .WithMany("MockTestSubjects")
                        .HasForeignKey("MockTestCategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MockTestCategory");
                });

            modelBuilder.Entity("Domain.PackageCardPayment", b =>
                {
                    b.HasOne("Domain.PackagePurchasePayment", "PackagePurchasePayment")
                        .WithMany("PackageCardPayments")
                        .HasForeignKey("PackagePurchasePaymentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PackagePurchasePayment");
                });

            modelBuilder.Entity("Domain.PackagePurchase", b =>
                {
                    b.HasOne("Domain.Company", "Company")
                        .WithMany("PackagePurchases")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.TestPackage", "TestPackage")
                        .WithMany("PackagePurchases")
                        .HasForeignKey("TestPackageID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("TestPackage");
                });

            modelBuilder.Entity("Domain.PackagePurchasePayment", b =>
                {
                    b.HasOne("Domain.PackagePurchase", "PackagePurchase")
                        .WithMany("PackagePurchasePayments")
                        .HasForeignKey("PackagePurchaseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.PaymentMode", "PaymentMode")
                        .WithMany("PackagePurchasePayment")
                        .HasForeignKey("PaymentModeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PackagePurchase");

                    b.Navigation("PaymentMode");
                });

            modelBuilder.Entity("Domain.PackageUPIPayment", b =>
                {
                    b.HasOne("Domain.PackagePurchasePayment", "PackagePurchasePayment")
                        .WithMany("PackageUPIPayments")
                        .HasForeignKey("PackagePurchasePaymentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PackagePurchasePayment");
                });

            modelBuilder.Entity("Domain.Question", b =>
                {
                    b.HasOne("Domain.QuestionBank", "QuestionBank")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionBankID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QuestionBank");
                });

            modelBuilder.Entity("Domain.QuestionAnswer", b =>
                {
                    b.HasOne("Domain.Question", "Question")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Domain.QuestionBank", b =>
                {
                    b.HasOne("Domain.Company", "Company")
                        .WithMany("QuestionBanks")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.QuestionDBCategory", "QuestionDBCategory")
                        .WithMany("QuestionBanks")
                        .HasForeignKey("QuestionDBCategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("QuestionDBCategory");
                });

            modelBuilder.Entity("Domain.QuestionDBCategory", b =>
                {
                    b.HasOne("Domain.Company", "Company")
                        .WithMany("QuestionDBCategories")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.ScheduleExam", b =>
                {
                    b.HasOne("Domain.Company", "Company")
                        .WithMany("ScheduleExams")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.PackagePurchase", "PackagePurchase")
                        .WithMany("ScheduleExam")
                        .HasForeignKey("PackagePurchaseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("PackagePurchase");
                });

            modelBuilder.Entity("Domain.ScheduleExamCandidate", b =>
                {
                    b.HasOne("Domain.Candidate", "Candidate")
                        .WithMany("ScheduleExamCandidates")
                        .HasForeignKey("CandidateID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.ScheduleExam", "ScheduleExam")
                        .WithMany("ScheduleExamCandidates")
                        .HasForeignKey("ScheduleExamID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("ScheduleExam");
                });

            modelBuilder.Entity("Domain.ScheduleExamDet", b =>
                {
                    b.HasOne("Domain.QuestionBank", "QuestionBank")
                        .WithMany("ScheduleExamDets")
                        .HasForeignKey("QuestionBankID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.ScheduleExam", "ScheduleExam")
                        .WithMany("ScheduleExamDets")
                        .HasForeignKey("ScheduleExamID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QuestionBank");

                    b.Navigation("ScheduleExam");
                });

            modelBuilder.Entity("Domain.ScheduleExamResult", b =>
                {
                    b.HasOne("Domain.ScheduleExamCandidate", "ScheduleExamCandidate")
                        .WithMany("ScheduleExamResults")
                        .HasForeignKey("ScheduleExamCandidateID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ScheduleExamCandidate");
                });

            modelBuilder.Entity("Domain.TestPackageDet", b =>
                {
                    b.HasOne("Domain.TestPackage", "TestPackage")
                        .WithMany("TestPackageDets")
                        .HasForeignKey("TestPackageID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TestPackage");
                });

            modelBuilder.Entity("Domain.Candidate", b =>
                {
                    b.Navigation("CandidatePerformances");

                    b.Navigation("ScheduleExamCandidates");
                });

            modelBuilder.Entity("Domain.CandidatePerformance", b =>
                {
                    b.Navigation("CandidatePerformanceDets");
                });

            modelBuilder.Entity("Domain.Company", b =>
                {
                    b.Navigation("CompanyComplaints");

                    b.Navigation("CompanyTrails");

                    b.Navigation("PackagePurchases");

                    b.Navigation("QuestionBanks");

                    b.Navigation("QuestionDBCategories");

                    b.Navigation("ScheduleExams");
                });

            modelBuilder.Entity("Domain.CompanyComplaint", b =>
                {
                    b.Navigation("CompanySolutions");
                });

            modelBuilder.Entity("Domain.MockTest", b =>
                {
                    b.Navigation("CandidatePerformanceDets");

                    b.Navigation("CandidatePerformances");
                });

            modelBuilder.Entity("Domain.MockTestCategory", b =>
                {
                    b.Navigation("MockTestSubjects");
                });

            modelBuilder.Entity("Domain.MockTestQuestion", b =>
                {
                    b.Navigation("MockTestQuestionOptions");
                });

            modelBuilder.Entity("Domain.MockTestQuestionOptions", b =>
                {
                    b.Navigation("MockTestQuestionAnswers");
                });

            modelBuilder.Entity("Domain.MockTestSubject", b =>
                {
                    b.Navigation("MockTestQuestions");

                    b.Navigation("MockTests");
                });

            modelBuilder.Entity("Domain.PackagePurchase", b =>
                {
                    b.Navigation("PackagePurchasePayments");

                    b.Navigation("ScheduleExam");
                });

            modelBuilder.Entity("Domain.PackagePurchasePayment", b =>
                {
                    b.Navigation("PackageCardPayments");

                    b.Navigation("PackageUPIPayments");
                });

            modelBuilder.Entity("Domain.PaymentMode", b =>
                {
                    b.Navigation("PackagePurchasePayment");
                });

            modelBuilder.Entity("Domain.Question", b =>
                {
                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("Domain.QuestionBank", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("ScheduleExamDets");
                });

            modelBuilder.Entity("Domain.QuestionDBCategory", b =>
                {
                    b.Navigation("QuestionBanks");
                });

            modelBuilder.Entity("Domain.ScheduleExam", b =>
                {
                    b.Navigation("ScheduleExamCandidates");

                    b.Navigation("ScheduleExamDets");
                });

            modelBuilder.Entity("Domain.ScheduleExamCandidate", b =>
                {
                    b.Navigation("ScheduleExamResults");
                });

            modelBuilder.Entity("Domain.TestPackage", b =>
                {
                    b.Navigation("PackagePurchases");

                    b.Navigation("TestPackageDets");
                });
#pragma warning restore 612, 618
        }
    }
}
